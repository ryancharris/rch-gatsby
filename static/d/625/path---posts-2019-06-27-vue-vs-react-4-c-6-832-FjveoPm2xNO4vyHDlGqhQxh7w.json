{"data":{"markdownRemark":{"html":"<p>For frontend developers, JavaScript frameworks have become increasingly important due to how fundamentally they change the way we approach building our applications. While not everyone uses them professional, or at all, the development community sure loves to talk about them. Unfortunately, these discussions often devolve into a diatribe about Framework X being better than Framework Y, or Framework Z not being “real JavaScript.”</p>\n<p>As an engineer, I have always found it strange to think of one framework as “better” than another when they’re really all flavors of the same. Essentially, these tools are all trying to solve the same problems and improve the developer experience; they just take different approaches.</p>\n<p>The intent of those building these frameworks is to empower developers to make better applications by making it easier for them to:</p>\n<ol>\n<li>Build reusable UI components</li>\n<li>Manage application state</li>\n<li>Inject data</li>\n</ol>\n<p>Sometimes it can feel like there is a hot new framework every other day (looking at you, Svelte), but React and Vue have been two of the most popular in recent years. Both are widely used at scale and have large, active open source communities.</p>\n<p>As a React developer at Guru, I primarily work with React. However, I have recently been working with a local Vue meetup to coordinate the use of our office space for their events. Having not built anything with Vue in a while, I decided this would be the perfect opportunity to build something cool and re-familiarize myself, with the added benefit of comparing it to React.</p>\n<p>Before we go any further, I just want to say: this article is not intended to determine whether React or Vue is better than the other. Instead, I hope to examine both frameworks in a practical sense and see how they differ when it comes to solving common problems. Examining another framework can even inform us of how to better use our own.</p>\n<h3>Background</h3>\n<p>I recently bought a house and moved to a new neighborhood, so I no longer have access to the subway and must rely on the bus system to get to work. While having some time to read on my slightly longer commute can be nice, standing outside for a bus that never seems to come is not.</p>\n<p>This seemed like a problem for which I could build a solution using Vue. Even though I could easily check SEPTA’s website or Google Maps (more on this later), I wanted to create a simple app that would tell me how much time I had until the next bus so I could quickly check it and run out the door.</p>\n<p>Since there are more aspects to any given framework than can be covered in this article, we are going to focus on the difference I encountered while trying to achieve the goals of this small project:</p>\n<ul>\n<li>It must have two views: one for heading to work, the other for heading home</li>\n<li>It must show information for the two bus lines I use to commute</li>\n<li>It must show when the next bus is arriving at each station</li>\n</ul>\n<p><em>Side note: My local transit authority did not have a solid API, so I ultimately ended up having to rely on Google Maps. To prevent tons of API calls, I set up a timed job to hit the API and then write a JSON file to cloud storage. This JSON is the data the app uses to render.</em></p>\n<p>In the end, the application ended up looking like this:</p>\n<p>SCREENSHOT</p>\n<h3>Approach</h3>\n<p>As we discussed earlier, React and Vue both have similar goals but differ slightly in their approach. When I say approach, I am referring to the way in which you, the developer, go about building your components.</p>\n<p>Of the two frameworks, Vue takes a more template-like approach, not dissimilar from the markup and templating tools used with Model-View-Controller frameworks in other languages like Ruby, Elixir, and PHP.</p>\n<p>React, on the other hand, feels a bit more like HTML-in-JavaScript. Take a look at the two components below and see if you can figure out what’s happening.</p>\n<p>CODE SNIPPET</p>\n<p>One is not necessarily better than the other; they’re just different. And that’s what makes them so interesting!</p>\n<h3>React vs. Vue</h3>\n<p>Below, I’ve highlighted five tasks a developer commonly performs when building applications and created examples of how to achieve the desired outcome using either framework.</p>\n<h4>#1 Conditional Rendering</h4>\n<p>A common strategy developers use is called conditional rendering. Essentially, this is a fancy way of saying “if X, then Y.” This is often how we show or hide parts of our interface from the user.</p>\n<p>We can see an example of this in <strong>App.vue</strong> within the <strong><template></strong> tags. Two of our components (<strong><Work /></strong> and <strong><Home /></strong>) are being conditionally rendered using Vue’s v-bindings. In this case, the user sees <strong><Work /></strong> if our local state (i.e., <strong>data.isWorkScreen</strong>) has a value of true. Otherwise, they see, <strong><Home /></strong>.</p>\n<p>CODE SNIPPET</p>\n<p>In React, we would do this slightly differently. There are a number of ways we could replicate the behavior seen above, but the most straightforward way would be to use an inline JSX expression right inside of the render function.</p>\n<p>CODE SNIPPET</p>","frontmatter":{"date":"Jun. 27, 2019","title":"5 Vue tips for React developers","heroCaption":"Fotis Fotopoulos","heroLink":"https://unsplash.com/@ffstop","attachments":[{"publicURL":"/static/two-monitors-c449938f1cc28f5c3b60aa87771498fd.jpg"}]},"timeToRead":4}},"pageContext":{"slug":"posts/2019-06-27-vue-vs-react/"}}