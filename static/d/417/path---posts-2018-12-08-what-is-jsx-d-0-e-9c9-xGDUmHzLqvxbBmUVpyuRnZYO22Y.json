{"data":{"markdownRemark":{"html":"<p>As developers, we use a variety of tools and open source packages to make our jobs easier. Some of them are so widely used throughout the community that they seem native to JavaScript. Though they're not, they can fundamentally change how you write code on a daily basis.</p>\n<p>One of these technologies that you're already using is JSX, a XML like syntax extension for JavaScript. Created by the wizards at Facebook, it is intended to simplify the developer experience. As the spec says, the rationale for creating JSX was:</p>\n<blockquote>\n<p>\"…to define a concise and familiar syntax for defining tree structures with attributes.\" ~ JSX Spec</p>\n</blockquote>\n<p>Now, you're probably saying to yourself, \"Hey, Ryan, this sounds great, but <strong>get to the code already</strong>\", so here's our first example.</p>\n<pre><code class=\"language-javascript\">const helloWorld = &#x3C;h1>Hello, World!&#x3C;/h1>;\n</code></pre>\n<p>And that's it! The snippet above looks familiar, but have you ever stopped to think about its power? JSX makes it so we can <strong>pass around tree structures composed of HTML or React elements as if they were standard JavaScript values</strong>. Crazy!</p>\n<p>While you don't have to use JSX when writing React (or use React in order to try JSX), there's no denying it is an important part of the React ecosystem, so let's dive in and see what's going on under the hood!</p>\n<hr>\n<h3>Getting started with JSX</h3>\n<p>The first thing to note when using JSX syntax is that <strong>React must be in scope</strong>. This is due to how it gets compiled. Take this component for example:</p>\n<pre><code class=\"language-javascript\">function Hello() {\n  return &#x3C;h1>Hello, World!&#x3C;/h1>;\n}\n</code></pre>\n<p>Behind the scenes, each element rendered by the <code>Hello</code> component is transpiled into to a React.createElement call. In this case:</p>\n<pre><code class=\"language-javascript\">function Hello() {\n  return React.createElement(\"h1\", {}, \"Hello, World!\");\n}\n</code></pre>\n<p>The same is true for nested elements. The two examples below would ultimately render the same markup.</p>\n<pre><code class=\"language-javascript\">// Example 1: Using JSX syntax\nfunction Nav() {\n  return (\n    &#x3C;ul>\n      &#x3C;li>Home&#x3C;/li>\n      &#x3C;li>About&#x3C;/li>\n      &#x3C;li>Portfolio&#x3C;/li>\n      &#x3C;li>Contact&#x3C;/li>\n    &#x3C;/ul>\n  );\n}\n// Example 2: Not using JSX syntax\nfunction Nav() {\n  return React.createElement(\n    \"ul\",\n    {},\n    React.createElement(\"li\", null, \"Home\"),\n    React.createElement(\"li\", null, \"About\"),\n    React.createElement(\"li\", null, \"Portfolio\"),\n    React.createElement(\"li\", null, \"Contact\")\n  );\n}\n</code></pre>\n<h3>React.createElement</h3>\n<p>When React creates elements, it calls this method, which takes three arguments.</p>\n<ol>\n<li>The element name</li>\n<li>An object representing the element's props</li>\n<li>An array of the element's children</li>\n</ol>\n<p>One thing to note here is that React interprets lowercase elements as HTML and Pascal case (ex. <code>ThisIsPascalCase</code>) elements as custom components. Because of this, <strong>the following examples would be interpreted differently</strong>.</p>\n<pre><code class=\"language-javascript\">// 1. HTML element\nReact.createElement(\"div\", null, \"Some content text here\");\n\n// 2. React element\nReact.createElement(Div, null, \"Some content text here\");\n</code></pre>\n<p>The first example would generate a <code>&#x3C;div></code> with the string <code>\"Some content text here\"</code> as its child. However, the second version would throw an error (unless, of course, a custom component <code>&#x3C;Div /></code> was in scope) because <code>&#x3C;Div /></code> is undefined.</p>\n<h3>Props in JSX</h3>\n<p>When working in React, your components often render children and need to pass them data in order for the children to render properly. These are called props.</p>\n<p>I like to think of React components as a group of friends. And what do friends do? They give each other props. Thankfully, JSX offers us a number of ways to do that.</p>\n<pre><code class=\"language-javascript\">// 1. Props defaulted to true\n&#x3C;User loggedIn />\n\n// 2. String literals\n&#x3C;User name=\"Jon Johnson\" />\n\n// 3. JavaScript expressions\n&#x3C;User balance={5 + 5 + 10} />\n\n// 4. Spread attributes\n&#x3C;User preferences={...this.state} />\n</code></pre>\n<p>But beware! <strong>You cannot pass if statements or for loops as props</strong> because they are statements, not expressions.</p>","frontmatter":{"date":"Dec. 08, 2018","title":"What the heck is JSX?","attachments":[{"publicURL":"/static/macbook-f701eb7b00b50f27f602efea12ac1672.jpg"}]},"timeToRead":3}},"pageContext":{"slug":"posts/2018-12-08-what-is-jsx/"}}