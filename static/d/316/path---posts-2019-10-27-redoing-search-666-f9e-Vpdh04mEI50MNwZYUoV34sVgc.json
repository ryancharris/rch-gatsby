{"data":{"markdownRemark":{"html":"<p>Recently, the product team at my company discovered the majority of our users were not utilizing filters when using our search interface.</p>\n<p>After looking at our analytics, it became apparent users weren’t engaging with filters because they didn’t know they existed.</p>\n<p>To fix this problem, we decided to rebuild our UI in order to highlight this functionality.</p>\n<p>But building a new search interface came with its own set of problems. In our case, we had three main concerns:</p>\n<ul>\n<li>\n<p>By adding filter dropdown menus with nested inputs, we would need a way to easily manage focus.</p>\n</li>\n<li>\n<p>With three filter menus, we needed a way to ensure only one menu was open at any given time.</p>\n</li>\n<li>\n<p>When the user selected a filter from one of the menus, we needed to both close the menu and trigger a new search.</p>\n</li>\n</ul>\n<p>We achieved all of our objectives by using <a href=\"https://blog.logrocket.com/how-and-when-to-use-reacts-new-context-api-b584e41b2704/\">React’s Context API</a> in conjunction with refs to create a centralized system for managing menu states and input focus.</p>\n<p>In this article, we’ll cover the following:</p>\n<p><strong>Context:</strong> basic usage and strategies for injecting data anywhere in your component tree</p>\n<p><strong>Refs:</strong> what they are and why our use case calls for them</p>\n<h3>Context</h3>\n<p>The official Context API was added to React in v16.3 and is intended to avoid what is commonly known as prop drilling, or manually passing props down a component tree.</p>\n<p>While there is nothing wrong with this approach, it can be unwieldy when dealing with complex component hierarchies, especially if some components don’t care about the data and are simply passing it on.</p>\n<p><img src=\"https://blog.logrocket.com/wp-content/uploads/2019/09/Illustration-1-Without-Context-nocdn.png\" alt=\"Without Context\"></p>\n<p>In order to use the Context API, you need to create a <code>Context.Provider</code> that takes a <code>value</code> prop representing all the data you want to inject into the child components that need it.</p>\n<p>Before the advent of <a href=\"https://blog.logrocket.com/frustrations-with-react-hooks/\">Hooks</a>, you would do this by using an associated <code>Context.Consumer</code>, but in the post-Hooks world, we can leverage the <code>useContext</code> Hook to subscribe a component to the closest Provider above it in the component tree.</p>\n<p><img src=\"https://blog.logrocket.com/wp-content/uploads/2019/09/Illustration-2-With-Context-nocdn.png\" alt=\"With Context\"></p>\n<p>In this case, Context provides a way to keep track of which menu should be open in our parent component, and then passes that value down to its children who, in turn, conditionally render the appropriate dropdown.</p>\n<p>The key here is that our Context also passes down a setter function. This is important because it allows the components consuming our context value to then update the state in our parent component, which causes the tree to re-render with the new menu now visible.</p>\n<p><img src=\"https://blog.logrocket.com/wp-content/uploads/2019/09/Illustration-3-Menu-value-and-setter-function-nocdn.png\" alt=\"Menu value with getter and setter\"></p>\n<p>By using the pattern described above, we can similarly manage the focus state of the various inputs in the search bar and filter menus.</p>\n<h3>Refs</h3>\n<p>While they have been part of React for a while, refs can still be somewhat confusing even for more experienced developers.</p>\n<p>Essentially, React provides a special ref attribute that can be applied to any element (JSX or HTML).</p>\n<p>Depending on what type of element you assign it to, the ref provides access to that class instance or DOM element, respectively.</p>\n<pre><code class=\"language-javascript\">// Applying a ref directly to an HTML element\n&#x3C;input\n  className=\"AuthorFilterMenu__filter-input\"\n  ref={authorFilterInputRef}\n  placeholder=\"Filter by author...\"\n  value={filterInputValue}\n  type=\"search\"\n  onInput={event => {\n    setFilterInputValue(event.currentTarget.value);\n  }}\n/>\n\n// Applying a ref to a React component instance\n&#x3C;AuthorFilterMenu ref={authorFilterInputRef} />\n</code></pre>\n<p>Though our use case requires us to go down this road, it is important to note that refs are a React antipattern because they allow direct DOM access. React does not really intend for developers to do this, so when using refs you should proceed with caution.</p>\n<p>Alternatively, React is designed to have events update the virtual DOM (a snapshot of the document object model kept in memory,) and allow the framework to update the page as needed in a process known as reconciliation.</p>\n<p>This not only makes React more performant by reducing the work done to update the page, but it also makes for a more consistent user experience.</p>\n<p>For us, we need to directly access the three <code>input</code>s in our component tree in order to use the browser’s <code>.focus()</code> method. Since we need to change focus states for our inputs based on user interaction, it makes sense to keep this logic in our parent component, too.</p>\n<p>We’ll create three different refs in our parent component that will point to the following:</p>\n<ol>\n<li>The input in our search bar</li>\n<li>The input in our first filter menu (ex. Author)</li>\n<li>The input in our second filter menu (ex. Year)</li>\n</ol>\n<p>Using our Context, we can then pass these refs down to our child components. In the child component, we destructure the appropriate <code>ref</code> off the component’s <code>props</code> object and assign it directly to our HTML <code>input</code>:</p>\n<pre><code class=\"language-javascript\">// Provide value in App.jsx\n&#x3C;section className=\"App__search\">\n  &#x3C;SearchContext.Provider\n    value={{\n      openMenu: openMenu,\n      toggleOpenMenu: toggleOpenMenu,\n      addAuthor: addAuthor,\n      addYear: addYear,\n      selectedAuthors: selectedAuthors,\n      selectedYears: selectedYears,\n      authorFilterInputRef: authorFilterInputRef,\n      searchBarRef: searchBarRef,\n      yearFilterInputRef: yearFilterInputRef\n    }}\n  >\n    &#x3C;SearchBar />\n  &#x3C;/SearchContext.Provider>\n&#x3C;/section>\n\n// In AuthorFilterMenu.jsx, we grab the ref from the searchContext\nfunction AuthorFilterMenu(props) {\n  const contextValue = React.useContext(SearchContext);\n  const {\n    addAuthor,\n    openMenu,\n    selectedAuthors,\n    authorFilterInputRef\n  } = contextValue;\n}\n\n// And then we apply it to the &#x3C;input>\nreturn (\n  &#x3C;div className={menuCn}>\n    &#x3C;input\n      className=\"AuthorFilterMenu__filter-input\"\n      ref={authorFilterInputRef}\n      placeholder=\"Filter by author...\"\n      value={filterInputValue}\n      type=\"search\"\n      onInput={event => {\n        setFilterInputValue(event.currentTarget.value);\n      }}\n    />\n    &#x3C;ul className=\"AuthorFilterMenu__list\">{createMenuItems()}&#x3C;/ul>\n  &#x3C;/div>\n);\n</code></pre>\n<p>Now, whenever one of the child components calls our menu state setter function to toggle a menu, we can add logic to also update which input is in focus.</p>\n<p>For example, if one of our filter menus is open and then closes, we would want to refocus the search input bar to allow the user to continue their query.</p>\n<p>One thing to note here is that function components don’t play well with refs.</p>\n<p>In order to pass a <code>ref</code> into a function component, you will need to use <code>React.forwardRef</code>, which creates a new component that receives a <code>ref</code> attribute and then passes it on to another component below.</p>\n<p>For a more detailed look at how to use <code>forwardRef</code>, check out the <a href=\"https://reactjs.org/docs/react-api.html#reactforwardref\">official React docs</a>.</p>\n<h3>Conclusion</h3>\n<p>While Context is a relatively new API and refs are somewhat of an antipattern, they compliment each other well in this case. By combining the two together, we are able to create a more straightforward way of managing both display and focus states within our new search interface.</p>\n<p>While we didn’t use any stores in this example, you could easily wire one up and include it in this data flow.</p>\n<p>For example, in the project I built at work, my parent component was subscribed to a store that provided a list of the items to be rendered in our dropdown menus.</p>\n<p>Once the parent received this data, it added it to our Context’s <code>value</code> prop and passed it down to the child components.</p>\n<p>Ultimately, the ability to centrally locate logic in this way allows for a more consistent user experience.</p>\n<p>By using Context, we easily decoupled our business logic and data fetching from the presentation and functionality of our UI components.</p>\n<p>We also made our code easier for other developers to read in the future, which is never a bad thing!</p>\n<p>For the full tutorial, check out this <a href=\"https://codesandbox.io/s/laughing-lichterman-lxl1y\">demo</a>:</p>\n<p>&#x3C;embed src=\"<a href=\"https://codesandbox.io/embed/laughing-lichterman-lxl1y?fontsize=12\">https://codesandbox.io/embed/laughing-lichterman-lxl1y?fontsize=12</a>\" width=\"100%\" height=\"300></p>\n<p>** <em>Originally <a href=\"https://blog.logrocket.com/redoing-search-ui-with-react-context-and-refs/\">published</a> on <a href=\"https://logrocket.com/\">LogRocket</a></em></p>","frontmatter":{"date":"Oct. 27, 2019","title":"Redoing search UI with React Context and refs","heroCaption":"Joshua Aragon","heroLink":"https://unsplash.com/@goshua13","attachments":[{"publicURL":"/static/joshua-aragon-unsplash-7f3413c8ee1a1824f338f2323432237b.jpg"}]},"timeToRead":6}},"pageContext":{"slug":"posts/2019-10-27-redoing-search/"}}